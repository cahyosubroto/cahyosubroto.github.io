import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as e,o as a}from"./app-Cp5uHnov.js";const n={};function l(h,i){return a(),t("div",null,i[0]||(i[0]=[e(`<h1 id="generated-asyncapi-specifications" tabindex="-1"><a class="header-anchor" href="#generated-asyncapi-specifications"><span>Generated AsyncAPI Specifications</span></a></h1><p>After defining data models and streams, Zillabase provides a generated HTTP AsyncAPI and Kafka AsyncAPI for accessing the Zillabase endpoints. This specification is different from the OpenAPI specification.</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>Read <a href="https://www.asyncapi.com/docs/concepts" target="_blank" rel="noopener noreferrer">this article</a> to learn more about AsyncAPI.</p></div><h2 id="obtaining-the-asyncapi-specifications" tabindex="-1"><a class="header-anchor" href="#obtaining-the-asyncapi-specifications"><span>Obtaining the AsyncAPI Specifications</span></a></h2><p>Run either the Petstore or Streampay project example. On the project directory, run the following command to list the available AsyncAPI specifications.</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">zillabase</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> asyncapi</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># outputs</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Registered AsyncAPI Spec:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># http-asyncapi</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># kafka-asyncapi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, Zillabase generates two kinds of AsyncAPI specifications: HTTP AsyncAPI specification and Kafka AsyncAPI specification. To export the AsyncAPI specification, run the following commands.</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># this command extract the HTTP AsyncAPI specification to http-spec.yaml file</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">zillabase</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> asyncapi</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http-asyncapi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http-spec.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># this command extract the Kafka AsyncAPI specification to kafka-spec.yaml file</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">zillabase</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> asyncapi</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kafka-asyncapi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">kafka-spec.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To view the generated AsyncAPI specification, you can use <a href="https://studio.asyncapi.com/" target="_blank" rel="noopener noreferrer">AsyncAPI Studio</a>.</p><h2 id="http-specification" tabindex="-1"><a class="header-anchor" href="#http-specification"><span>HTTP Specification</span></a></h2><p>The HTTP AsyncAPI specification provides information about the HTTP server and information about its available endpoints. For every entity defined, Zillabase serves the following HTTP endpoints:</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>Method</strong></td><td><strong>Endpoint</strong></td><td><strong>Description</strong></td></tr><tr><td>GET</td><td>/&lt;entity&gt;</td><td>Fetch all entity data</td></tr><tr><td>POST</td><td>/&lt;entity&gt;</td><td>Insert an entity data</td></tr><tr><td>GET</td><td>/&lt;entity&gt;/{id}</td><td>Get entity data by id</td></tr><tr><td>PUT</td><td>/&lt;entity&gt;/{id}</td><td>Update an entity data by id</td></tr><tr><td>GET</td><td>/&lt;entity&gt;-stream</td><td>Stream entity data changes</td></tr><tr><td>GET</td><td>/&lt;entity&gt;-stream-identity</td><td>Stream entity data changes</td></tr></tbody></table><p>The <code>/&lt;entity&gt;</code> and <code>/&lt;entity&gt;/{id}</code> endpoints are regular REST API endpoints. On the other hand, <code>/&lt;entity&gt;-stream</code> and <code>/&lt;entity&gt;-stream-identity</code> endpoints is an HTTP endpoint that serves server-sent events (SSE). You can subscribe/ consume any data changes that happened to the <code>&lt;entity&gt;</code> data with the stream endpoint.</p><p>Refer to the message schema defined on the operation and channels to learn the schema for those endpoints. Every HTTP endpoint supports various input and output payload formats, such as JSON, Avro, and Protobuf. To adjust the payload formats, define the Content-Type and Accept header during the HTTP request.</p><h2 id="kafka-specification" tabindex="-1"><a class="header-anchor" href="#kafka-specification"><span>Kafka Specification</span></a></h2><p>The Kafka AsyncAPI specification provides information about the Kafka cluster and schema definition for Kafka based on our data model and stream. It defines a channel for every entity and supports publish and subscribe operations for that channel.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><p>This example will go through all of the available endpoints for an entity using the Petstore project example. The project example provides the following endpoints:</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>Not every entity is listed as this section only provides an example of an entity.</p></div><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>Protocol</strong></td><td><strong>Method/ Action</strong></td><td><strong>Endpoint/ Channel</strong></td></tr><tr><td>HTTP</td><td>GET</td><td>/petstore_pets</td></tr><tr id=""><td>HTTP</td><td>GET</td><td>/petstore_pets/</td></tr><tr id=""><td>HTTP</td><td>PUT</td><td>/petstore_pets/</td></tr><tr><td>HTTP</td><td>POST</td><td>/petstore_pets</td></tr><tr><td>HTTP</td><td>GET</td><td>/petstore_pets-stream</td></tr><tr><td>Kafka</td><td>Receive</td><td>dev.petstore_pets</td></tr><tr><td>Kafka</td><td>Send</td><td>dev.petstore_pets</td></tr></tbody></table><p>According to the specifications, the HTTP server is on the <code>localhost:8080</code> address, and the Kafka cluster is on the <code>localhost:9092</code> address. Let&#39;s try those endpoints.</p><h3 id="fetch-all-pets" tabindex="-1"><a class="header-anchor" href="#fetch-all-pets"><span>Fetch all pets</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -X</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://localhost:8080/petstore_pets</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># output</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [{&quot;id&quot;: &quot;234&quot;, &quot;breed&quot;: &quot;Beagle&quot;},{&quot;id&quot;: &quot;123&quot;, &quot;breed&quot;: &quot;German Shepherd&quot;}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update-a-pet" tabindex="-1"><a class="header-anchor" href="#update-a-pet"><span>Update a pet</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -X</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PUT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://localhost:8080/petstore_pets/234</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--data </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;{&quot;id&quot;: &quot;234&quot;, &quot;breed&quot;: &quot;Tippler&quot;}&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># prints nothing</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-the-previously-updated-data" tabindex="-1"><a class="header-anchor" href="#get-the-previously-updated-data"><span>Get the previously updated data</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -X</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://localhost:8080/petstore_pets/234</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># output</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># {&quot;id&quot;: &quot;234&quot;, &quot;breed&quot;: &quot;Tippler&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="consume-the-entity-streams-with-sse" tabindex="-1"><a class="header-anchor" href="#consume-the-entity-streams-with-sse"><span>Consume the entity streams with SSE</span></a></h3><p>The command won&#39;t automatically exit as it listens to any new incoming events. Keep it open.</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -N</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --http2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://localhost:8080/petstore_pets-stream</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># output</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># id:AQIABA==</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># data:{&quot;id&quot;: &quot;123&quot;, &quot;breed&quot;: &quot;German Shepherd&quot;}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># id:AQIACA==</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># data:{&quot;id&quot;: &quot;234&quot;, &quot;breed&quot;: &quot;Tippler&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="consume-the-kafka-topic" tabindex="-1"><a class="header-anchor" href="#consume-the-kafka-topic"><span>Consume the Kafka topic</span></a></h3><p>The command won&#39;t automatically exit as it listens to any new incoming events. Keep it open.</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> zillabase_kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /opt/bitnami/kafka/bin/kafka-console-consumer.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --bootstrap-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> localhost:9092</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --topic</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev.petstore_pets</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># prints nothing as there are no new incoming data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="create-new-pet-data" tabindex="-1"><a class="header-anchor" href="#create-new-pet-data"><span>Create new pet data</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -X</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> POST</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://localhost:8080/petstore_pets</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--data </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;{&quot;id&quot;: &quot;345&quot;, &quot;breed&quot;: &quot;koi&quot;}&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># prints nothing</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="check-the-stream-consumer" tabindex="-1"><a class="header-anchor" href="#check-the-stream-consumer"><span>Check the Stream Consumer</span></a></h3><p>Go back to the SSE consumer and Kafka consumer. You&#39;ll see that these consumers receive a new event that prints out the added data.</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># SSE consumer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># New stream data received</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># id:AQIACg==</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># data:{&quot;id&quot;: &quot;345&quot;, &quot;breed&quot;: &quot;koi&quot;}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Kafka consumer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># New stream data received</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 345</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># koi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)]))}const p=s(n,[["render",l],["__file","generated-asyncapi-specs.html.vue"]]),o=JSON.parse('{"path":"/guides/generated-asyncapi-specs.html","title":"Generated AsyncAPI Specifications","lang":"en-US","frontmatter":{"description":"Generated AsyncAPI Specifications After defining data models and streams, Zillabase provides a generated HTTP AsyncAPI and Kafka AsyncAPI for accessing the Zillabase endpoints. ...","head":[["meta",{"property":"og:url","content":"https://docs.aklivity.io/guides/generated-asyncapi-specs.html"}],["meta",{"property":"og:site_name","content":"Documentation"}],["meta",{"property":"og:title","content":"Generated AsyncAPI Specifications"}],["meta",{"property":"og:description","content":"Generated AsyncAPI Specifications After defining data models and streams, Zillabase provides a generated HTTP AsyncAPI and Kafka AsyncAPI for accessing the Zillabase endpoints. ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-02T04:23:47.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-02T04:23:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Generated AsyncAPI Specifications\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-02T04:23:47.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Obtaining the AsyncAPI Specifications","slug":"obtaining-the-asyncapi-specifications","link":"#obtaining-the-asyncapi-specifications","children":[]},{"level":2,"title":"HTTP Specification","slug":"http-specification","link":"#http-specification","children":[]},{"level":2,"title":"Kafka Specification","slug":"kafka-specification","link":"#kafka-specification","children":[]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[{"level":3,"title":"Fetch all pets","slug":"fetch-all-pets","link":"#fetch-all-pets","children":[]},{"level":3,"title":"Update a pet","slug":"update-a-pet","link":"#update-a-pet","children":[]},{"level":3,"title":"Get the previously updated data","slug":"get-the-previously-updated-data","link":"#get-the-previously-updated-data","children":[]},{"level":3,"title":"Consume the entity streams with SSE","slug":"consume-the-entity-streams-with-sse","link":"#consume-the-entity-streams-with-sse","children":[]},{"level":3,"title":"Consume the Kafka topic","slug":"consume-the-kafka-topic","link":"#consume-the-kafka-topic","children":[]},{"level":3,"title":"Create new pet data","slug":"create-new-pet-data","link":"#create-new-pet-data","children":[]},{"level":3,"title":"Check the Stream Consumer","slug":"check-the-stream-consumer","link":"#check-the-stream-consumer","children":[]}]}],"git":{"createdTime":1732866505000,"updatedTime":1733113427000,"contributors":[{"name":"cahyosubroto","email":"cahyosubroto30@gmail.com","commits":2}]},"readingTime":{"minutes":2.35,"words":704},"filePathRelative":"guides/generated-asyncapi-specs.md","localizedDate":"November 29, 2024","autoDesc":true,"excerpt":"\\n<p>After defining data models and streams, Zillabase provides a generated HTTP AsyncAPI and Kafka AsyncAPI for accessing the Zillabase endpoints. This specification is different from the OpenAPI specification.</p>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">Info</p>\\n<p>Read <a href=\\"https://www.asyncapi.com/docs/concepts\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">this article</a> to learn more about AsyncAPI.</p>\\n</div>"}');export{p as comp,o as data};
