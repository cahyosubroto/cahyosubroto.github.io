import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as i,b as e,d as t,e as l,f as n,r,o as p}from"./app-CKeM1Wjf.js";const o={};function k(m,s){const a=r("RouteLink");return p(),h("div",null,[s[14]||(s[14]=i("h1",{id:"models",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#models"},[i("span",null,"Models")])],-1)),i("p",null,[s[1]||(s[1]=e("When Zilla interacts with the data inside of a message, it only parses the necessary metadata with standard formats. The processing of messages is simple and uses fewer resources to proxy data streams. A ")),t(a,{to:"/reference/config/models/"},{default:l(()=>s[0]||(s[0]=[i("code",null,"model",-1)])),_:1}),s[2]||(s[2]=e(" adds the type syntax or structure definitions that Zilla needs to deserialize the remaining message parts."))]),s[15]||(s[15]=n(`<h2 id="primitive-models" tabindex="-1"><a class="header-anchor" href="#primitive-models"><span>Primitive Models</span></a></h2><p>Primitive models will have additional properties based on the type used.</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">model</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">string</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">encoding</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">utf_8</span></span></code></pre></div>`,3)),i("blockquote",null,[i("p",null,[t(a,{to:"/how-tos/models/#validating-message-keys"},{default:l(()=>s[3]||(s[3]=[e("Validating message keys")])),_:1}),s[4]||(s[4]=e(" | ")),s[5]||(s[5]=i("a",{href:"https://github.com/aklivity/zilla-examples/tree/main/http.proxy.schema.inline",target:"_blank",rel:"noopener noreferrer"},"http.proxy.schema.inline example",-1))])]),s[16]||(s[16]=i("h2",{id:"schema-models",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#schema-models"},[i("span",null,"Schema Models")])],-1)),i("p",null,[s[7]||(s[7]=e("Schema-based models will reference a ")),t(a,{to:"/concepts/catalogs.html"},{default:l(()=>s[6]||(s[6]=[e("catalog")])),_:1}),s[8]||(s[8]=e(" to supply the binding with the configured model definition. Schemas referenced by their subject will fetch the latest version of that schema."))]),s[17]||(s[17]=n(`<ul><li>Fetch the latest schema by <code>subject</code>.</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;"> model</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">avro</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;"> catalog</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">   my_catalog</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    - </span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">subject</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">my_schema_subject</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Fetch the latest schema by the schema definition on a Kafka <code>topic</code>.</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;"> model</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">avro</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;"> catalog</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">   my_catalog</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    - </span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">strategy</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">topic</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Fetch a specific schema by its schema ID.</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;"> model</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">avro</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;"> catalog</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">   my_catalog</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    - </span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">id</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">42</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),i("blockquote",null,[i("p",null,[t(a,{to:"/how-tos/models/#validating-a-new-message"},{default:l(()=>s[9]||(s[9]=[e("Validating a new message")])),_:1}),s[11]||(s[11]=e(" | ")),t(a,{to:"/how-tos/models/#expose-a-different-model-format"},{default:l(()=>s[10]||(s[10]=[e("Expose a different model format")])),_:1}),s[12]||(s[12]=e(" | ")),s[13]||(s[13]=i("a",{href:"https://github.com/aklivity/zilla-examples/tree/main/http.kafka.karapace",target:"_blank",rel:"noopener noreferrer"},"http.kafka.karapace example",-1))])])])}const y=d(o,[["render",k],["__file","models.html.vue"]]),u=JSON.parse('{"path":"/concepts/models.html","title":"Models","lang":"en-US","frontmatter":{"description":"Models When Zilla interacts with the data inside of a message, it only parses the necessary metadata with standard formats. The processing of messages is simple and uses fewer r...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://docs.aklivity.io/zilla-docs/next/concepts/models.html"}],["meta",{"property":"og:site_name","content":"Documentation"}],["meta",{"property":"og:title","content":"Models"}],["meta",{"property":"og:description","content":"Models When Zilla interacts with the data inside of a message, it only parses the necessary metadata with standard formats. The processing of messages is simple and uses fewer r..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Models\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Primitive Models","slug":"primitive-models","link":"#primitive-models","children":[]},{"level":2,"title":"Schema Models","slug":"schema-models","link":"#schema-models","children":[]}],"readingTime":{"minutes":0.64,"words":192},"filePathRelative":"concepts/models.md","autoDesc":true}');export{y as comp,u as data};
