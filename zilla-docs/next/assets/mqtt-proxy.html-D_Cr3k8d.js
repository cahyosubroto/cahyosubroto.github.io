import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as n,b as t,d as a,e as i,f as o,r as d,o as p}from"./app-CKeM1Wjf.js";const f={};function c(u,e){const s=d("RouteLink");return p(),l("div",null,[e[39]||(e[39]=n("h1",{id:"mqtt-kafka-proxy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mqtt-kafka-proxy"},[n("span",null,"MQTT Kafka Proxy")])],-1)),e[40]||(e[40]=n("p",null,"The Zilla MQTT Kafka Proxy manages MQTT Pub/Sub connections and messages on and off of Kafka.",-1)),n("p",null,[e[2]||(e[2]=t("An MQTT server acts as a broker between publishers and subscribers. This requires a complex protocol to manage the wide range of IoT devices and use cases. By proxying these messages on and off of Kafka with the ")),a(s,{to:"/reference/config/bindings/mqtt-kafka/"},{default:i(()=>e[0]||(e[0]=[t("mqtt-kafka")])),_:1}),e[3]||(e[3]=t(" binding in a ")),a(s,{to:"/reference/config/overview.html"},{default:i(()=>e[1]||(e[1]=[t("zilla.yaml")])),_:1}),e[4]||(e[4]=t(" config, IoT devices can transmit data to a wider range of tech stacks, adapting to more business needs."))]),e[41]||(e[41]=o('<p>Zilla uses specific Kafka topics to store and route MQTT messages, meaning the Kafka architecture can be optimized for MQTT Pub/Sub. MQTT client subscribers and publishers will communicate with Zilla the same as any broker.</p><h2 id="an-mqtt-broker" tabindex="-1"><a class="header-anchor" href="#an-mqtt-broker"><span>An MQTT Broker</span></a></h2><p>A Zilla MQTT server can manage client sessions and broker all traffic, adhering to the official <a href="https://mqtt.org/mqtt-specification/" target="_blank" rel="noopener noreferrer">MQTT protocol</a>.</p><h3 id="protocol-versions" tabindex="-1"><a class="header-anchor" href="#protocol-versions"><span>Protocol versions</span></a></h3><p>An MQTT client can use either the <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html" target="_blank" rel="noopener noreferrer">MQTT v5.0</a> and <a href="https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html" target="_blank" rel="noopener noreferrer">MQTT v3.1.1</a> specifications.</p><h3 id="qos" tabindex="-1"><a class="header-anchor" href="#qos"><span>QOS</span></a></h3><p>An MQTT client can use any Quality of Service flag.</p><ul><li>QoS 0 - At most once</li><li>QoS 1 - At least once</li><li>QoS 2 - Exactly once</li></ul><h3 id="mqtt-over-websocket" tabindex="-1"><a class="header-anchor" href="#mqtt-over-websocket"><span>MQTT over WebSocket</span></a></h3>',9)),n("p",null,[e[6]||(e[6]=t("The ")),a(s,{to:"/reference/config/bindings/tcp/"},{default:i(()=>e[5]||(e[5]=[t("tcp")])),_:1}),e[7]||(e[7]=t(" binding defines the ports Zilla will accept traffic for both MQTT and WebSocket connections. Zilla natively handles WebSockets and can manage the MQTT protocol over an active connection."))]),e[42]||(e[42]=o('<h3 id="last-will-and-testament" tabindex="-1"><a class="header-anchor" href="#last-will-and-testament"><span>Last Will and Testament</span></a></h3><p>An MQTT client can specify a last will and testament (LWT) message and topic that is delivered when the client disconnects abruptly and fails to reconnect before session timeout.</p><h3 id="correlated-request-response" tabindex="-1"><a class="header-anchor" href="#correlated-request-response"><span>Correlated request-response</span></a></h3><p>An MQTT client can use the v5 request-response paradigm to send messages with a response topic and correlated data. A requesting MQTT client can send a message on one topic and receive a response on another, while a responding MQTT client or any Kafka workflow can handle the message&#39;s journey.</p><h3 id="reconnect" tabindex="-1"><a class="header-anchor" href="#reconnect"><span>Reconnect</span></a></h3><p>An MQTT client reconnecting with the same client-id, even to a different Zilla instance, will automatically remain subscribed to MQTT topics previously subscribed while previously connected.</p><h3 id="session-takeover" tabindex="-1"><a class="header-anchor" href="#session-takeover"><span>Session takeover</span></a></h3><p>An MQTT client connecting with the same client-id, even to a different Zilla instance, will automatically disconnect the original MQTT client and take over the session.</p><h3 id="redirect" tabindex="-1"><a class="header-anchor" href="#redirect"><span>Redirect</span></a></h3><p>An MQTT client can be redirected to a specific Zilla instance, sharding client session state across Zilla instances without needing to replicate every client&#39;s session state on each Zilla instance.</p><h2 id="pub-sub-with-kafka" tabindex="-1"><a class="header-anchor" href="#pub-sub-with-kafka"><span>Pub/Sub with Kafka</span></a></h2>',11)),n("p",null,[e[9]||(e[9]=t("Zilla manages MQTT pub/sub to Kafka using three Kafka topics. The specific topic names can be configured using the ")),a(s,{to:"/reference/config/bindings/mqtt-kafka/proxy.html#options-topics"},{default:i(()=>e[8]||(e[8]=[t("options.topics")])),_:1}),e[10]||(e[10]=t(" property."))]),e[43]||(e[43]=n("h3",{id:"messages-on-kafka",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#messages-on-kafka"},[n("span",null,"Messages on Kafka")])],-1)),n("p",null,[e[12]||(e[12]=t("All MQTT messages brokered by Zilla are published on the ")),a(s,{to:"/reference/config/bindings/mqtt-kafka/proxy.html#topics-messages"},{default:i(()=>e[11]||(e[11]=[t("messages")])),_:1}),e[13]||(e[13]=t(" Kafka topic. The MQTT message topic becomes the Kafka key."))]),e[44]||(e[44]=n("h3",{id:"topic-routing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#topic-routing"},[n("span",null,"Topic routing")])],-1)),n("p",null,[e[18]||(e[18]=t("By defining ")),a(s,{to:"/reference/config/bindings/mqtt-kafka/proxy.html#routes"},{default:i(()=>e[14]||(e[14]=[t("routes")])),_:1}),e[19]||(e[19]=t(" in Zilla, you can direct MQTT publish and subscribe connections to specific kafka topics other than the ")),a(s,{to:"/reference/config/bindings/mqtt-kafka/proxy.html#topics-messages"},{default:i(()=>e[15]||(e[15]=[t("messages")])),_:1}),e[20]||(e[20]=t(" Kafka topic. The ")),a(s,{to:"/reference/config/bindings/mqtt-kafka/proxy.html#topics-sessions"},{default:i(()=>e[16]||(e[16]=[t("sessions")])),_:1}),e[21]||(e[21]=t(" and ")),a(s,{to:"/reference/config/bindings/mqtt-kafka/proxy.html#topics-retained"},{default:i(()=>e[17]||(e[17]=[t("retained")])),_:1}),e[22]||(e[22]=t(" topics are not affected by routing."))]),e[45]||(e[45]=n("h3",{id:"retaining-messages",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#retaining-messages"},[n("span",null,"Retaining Messages")])],-1)),n("p",null,[e[24]||(e[24]=t("An MQTT client can Publish messages to any configured Kafka topics, marking specific messages with the retain flag. These messages will have a copy published on the ")),a(s,{to:"/reference/config/bindings/mqtt-kafka/proxy.html#topics-retained"},{default:i(()=>e[23]||(e[23]=[t("retained")])),_:1}),e[25]||(e[25]=t(" Kafka topic. When a client subscribes with replay-on-subscribe, Zilla will deliver the retained messages."))]),e[46]||(e[46]=n("h3",{id:"session-management",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#session-management"},[n("span",null,"Session Management")])],-1)),n("p",null,[e[27]||(e[27]=t("MQTT connect, disconnect, and other session messages are maintained on the log compacted ")),a(s,{to:"/reference/config/bindings/mqtt-kafka/proxy.html#topics-sessions"},{default:i(()=>e[26]||(e[26]=[t("sessions")])),_:1}),e[28]||(e[28]=t(" Kafka topic. A message keyed by the MQTT client ID on the topic is used to track client subscriptions across client reconnects."))]),e[47]||(e[47]=n("h4",{id:"kafka-consumer-groups-for-mqtt-sessions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#kafka-consumer-groups-for-mqtt-sessions"},[n("span",null,"Kafka Consumer Groups for MQTT sessions")])],-1)),n("p",null,[e[30]||(e[30]=t("A consumer group is created for each unique client ID used by an MQTT session with the format ")),e[31]||(e[31]=n("code",null,"zilla:<zilla namespace>-<binding name>-<MQTT client ID>",-1)),e[32]||(e[32]=t(". Zilla minimizes the number of heartbeats required to approximately one per MQTT session expiry interval. When an MQTT session expires, perhaps because the MQTT client abruptly disconnected but did not reconnect, the corresponding consumer group also expires and the associated tracking state in the ")),a(s,{to:"/reference/config/bindings/mqtt-kafka/proxy.html#topics-sessions"},{default:i(()=>e[29]||(e[29]=[t("sessions")])),_:1}),e[33]||(e[33]=t(" Kafka topic is cleaned up automatically."))]),e[48]||(e[48]=n("h2",{id:"authorizing-clients",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#authorizing-clients"},[n("span",null,"Authorizing clients")])],-1)),n("p",null,[e[36]||(e[36]=t("Any connection Zilla handles can be secured using the ")),a(s,{to:"/reference/config/bindings/tls/"},{default:i(()=>e[34]||(e[34]=[t("tls")])),_:1}),e[37]||(e[37]=t(" binding. This means both MQTT and MQTT over WebSocket can be encrypted. Additionally, A client connection to the MQTT server can be guarded by the ")),a(s,{to:"/reference/config/guards/jwt.html"},{default:i(()=>e[35]||(e[35]=[t("jwt")])),_:1}),e[38]||(e[38]=t(" guard supporting JWT access tokens, with fine-grained privileges enforced on publish or subscribe to MQTT topics."))])])}const k=r(f,[["render",c],["__file","mqtt-proxy.html.vue"]]),h=JSON.parse('{"path":"/concepts/kafka-proxies/mqtt-proxy.html","title":"MQTT Kafka Proxy","lang":"en-US","frontmatter":{"description":"The Zilla MQTT Kafka Proxy manages MQTT Pub/Sub connections and messages on and off of Kafka.","prev":false,"next":"/tutorials/mqtt/mqtt-intro.md","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://docs.aklivity.io/zilla-docs/next/concepts/kafka-proxies/mqtt-proxy.html"}],["meta",{"property":"og:site_name","content":"Documentation"}],["meta",{"property":"og:title","content":"MQTT Kafka Proxy"}],["meta",{"property":"og:description","content":"The Zilla MQTT Kafka Proxy manages MQTT Pub/Sub connections and messages on and off of Kafka."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MQTT Kafka Proxy\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"An MQTT Broker","slug":"an-mqtt-broker","link":"#an-mqtt-broker","children":[{"level":3,"title":"Protocol versions","slug":"protocol-versions","link":"#protocol-versions","children":[]},{"level":3,"title":"QOS","slug":"qos","link":"#qos","children":[]},{"level":3,"title":"MQTT over WebSocket","slug":"mqtt-over-websocket","link":"#mqtt-over-websocket","children":[]},{"level":3,"title":"Last Will and Testament","slug":"last-will-and-testament","link":"#last-will-and-testament","children":[]},{"level":3,"title":"Correlated request-response","slug":"correlated-request-response","link":"#correlated-request-response","children":[]},{"level":3,"title":"Reconnect","slug":"reconnect","link":"#reconnect","children":[]},{"level":3,"title":"Session takeover","slug":"session-takeover","link":"#session-takeover","children":[]},{"level":3,"title":"Redirect","slug":"redirect","link":"#redirect","children":[]}]},{"level":2,"title":"Pub/Sub with Kafka","slug":"pub-sub-with-kafka","link":"#pub-sub-with-kafka","children":[{"level":3,"title":"Messages on Kafka","slug":"messages-on-kafka","link":"#messages-on-kafka","children":[]},{"level":3,"title":"Topic routing","slug":"topic-routing","link":"#topic-routing","children":[]},{"level":3,"title":"Retaining Messages","slug":"retaining-messages","link":"#retaining-messages","children":[]},{"level":3,"title":"Session Management","slug":"session-management","link":"#session-management","children":[{"level":4,"title":"Kafka Consumer Groups for MQTT sessions","slug":"kafka-consumer-groups-for-mqtt-sessions","link":"#kafka-consumer-groups-for-mqtt-sessions","children":[]}]}]},{"level":2,"title":"Authorizing clients","slug":"authorizing-clients","link":"#authorizing-clients","children":[]}],"readingTime":{"minutes":2.56,"words":769},"filePathRelative":"concepts/kafka-proxies/mqtt-proxy.md"}');export{k as comp,h as data};
