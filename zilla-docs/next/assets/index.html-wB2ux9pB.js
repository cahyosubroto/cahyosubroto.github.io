import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,f as s,a as i,d as n,e as t,r as h,o as d,b as l}from"./app-2pbKPq8C.js";const o={};function p(k,e){const a=h("RouteLink");return d(),r("div",null,[e[3]||(e[3]=s('<h1 id="kafka-binding" tabindex="-1"><a class="header-anchor" href="#kafka-binding"><span>kafka Binding</span></a></h1><p>Defines a binding with <code>kafka</code> protocol support, with <code>cache_client</code>, <code>cache_server</code> or <code>client</code> behavior.</p><h2 id="cache-behavior" tabindex="-1"><a class="header-anchor" href="#cache-behavior"><span>Cache Behavior</span></a></h2><p>The <code>cache_client</code> and <code>cache_server</code> kinds combine to provide a persistent cache of <code>kafka</code> messages per <code>topic</code> <code>partition</code> honoring the <code>kafka</code> <code>topic</code> configuration for message expiration and compaction. Messages ordering is guaranteed per <code>partition</code> and messages are merged into a unified stream for the <code>topic</code> spanning all <code>partitions</code>.</p><p>The <code>cache_server</code> kind supports proactive <code>fetch</code> of messages to keep the cache fresh in preparation for new consumers. This is enabled by configuring a list of <code>bootstrap</code> topics for the binding.</p><p>The <code>cache_client</code> kind supports filtering by <code>kafka</code> message key, headers or a combination of key and headers.</p><p>Message conflation occurs implicitly for <code>compacted</code> <code>kafka</code> topics, where a slower consumer that is not keeping up with the latest messages can safely skip over each older message that has effectively been replaced by a newer message with the same key.</p><p>When a new consumer arrives, the latest messages in the compacted topic are immediately delivered to that consumer, followed by any additional messages as they are produced to the <code>kafka</code> <code>topic</code>.</p><p>When the <code>kafka</code> <code>topic</code> is not compacted, then the binding can be configured to either replay historical messages first, or start with upcoming live messages instead.</p><p>The <code>cache_client</code> and <code>cache_server</code> also combine to provide a staging area when producing new messages as <code>kafka</code> requires exact message length up front when producing new messages and <code>kafka</code> does not support producing multiple messages in parallel over the same network connection.</p><h2 id="cache-client" tabindex="-1"><a class="header-anchor" href="#cache-client"><span>cache_client</span></a></h2>',11)),i("blockquote",null,[i("p",null,[n(a,{to:"/reference/config/bindings/kafka/cache_client.html"},{default:t(()=>e[0]||(e[0]=[l("Full config")])),_:1})])]),e[4]||(e[4]=s(`<div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">kafka_cache_client</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  type</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">kafka</span></span>
<span class="line highlighted"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  kind</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">cache_client</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  exit</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">kafka_cache_server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cache-server" tabindex="-1"><a class="header-anchor" href="#cache-server"><span>cache_server</span></a></h2>`,2)),i("blockquote",null,[i("p",null,[n(a,{to:"/reference/config/bindings/kafka/cache_server.html"},{default:t(()=>e[1]||(e[1]=[l("Full config")])),_:1})])]),e[5]||(e[5]=s(`<div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">kafka_cache_server</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  type</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">kafka</span></span>
<span class="line highlighted"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  kind</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">cache_server</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  options</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">    bootstrap</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">      - </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">items-responses</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  exit</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">kafka_client</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="client" tabindex="-1"><a class="header-anchor" href="#client"><span>client</span></a></h2>`,2)),i("blockquote",null,[i("p",null,[n(a,{to:"/reference/config/bindings/kafka/client.html"},{default:t(()=>e[2]||(e[2]=[l("Full config")])),_:1})])]),e[6]||(e[6]=s(`<p>The <code>client</code> kind <code>kafka</code> binding receives inbound application streams and encodes each as a network stream via <code>kafka</code> request-response protocol. Note that the same network stream can be reused to encode multiple <code>kafka</code> requests, including both <code>fetch</code> and <code>produce</code> requests.</p><p>Conditional routes based on <code>kafka</code> <code>topic</code> names are used to route these network streams to an <code>exit</code> binding that ultimately reaches a <code>kafka</code> broker.</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">kafka_client</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  type</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">kafka</span></span>
<span class="line highlighted"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  kind</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">client</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  options</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">    servers</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">      - </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">\${{env.KAFKA_BOOTSTRAP_SERVER}}</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">    sasl</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">      mechanism</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">scram-sha-256</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">      username</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">\${{env.SASL_USERNAME}}</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">      password</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">\${{env.SASL_PASSWORD}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3))])}const u=c(o,[["render",p],["__file","index.html.vue"]]),v=JSON.parse('{"path":"/reference/config/bindings/kafka/","title":"kafka Binding","lang":"en-US","frontmatter":{"redirectFrom":"/reference/config/bindings/binding-kafka.html","dir":{"collapsible":false,"link":true},"shortTitle":"kafka","category":["Binding"],"tag":["kafka","cache_client","cache_server","client"],"description":"kafka Binding Defines a binding with kafka protocol support, with cache_client, cache_server or client behavior. Cache Behavior The cache_client and cache_server kinds combine t...","gitInclude":[".partials/cache_client.yaml",".partials/cache_server.yaml",".partials/client.yaml"],"head":[["meta",{"property":"og:url","content":"https://docs.aklivity.io/zilla-docs/next/reference/config/bindings/kafka/"}],["meta",{"property":"og:site_name","content":"Documentation"}],["meta",{"property":"og:title","content":"kafka Binding"}],["meta",{"property":"og:description","content":"kafka Binding Defines a binding with kafka protocol support, with cache_client, cache_server or client behavior. Cache Behavior The cache_client and cache_server kinds combine t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"kafka"}],["meta",{"property":"article:tag","content":"cache_client"}],["meta",{"property":"article:tag","content":"cache_server"}],["meta",{"property":"article:tag","content":"client"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"kafka Binding\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Cache Behavior","slug":"cache-behavior","link":"#cache-behavior","children":[]},{"level":2,"title":"cache_client","slug":"cache-client","link":"#cache-client","children":[]},{"level":2,"title":"cache_server","slug":"cache-server","link":"#cache-server","children":[]},{"level":2,"title":"client","slug":"client","link":"#client","children":[]}],"readingTime":{"minutes":1.2,"words":360},"filePathRelative":"reference/config/bindings/kafka/README.md","autoDesc":true}');export{u as comp,v as data};
