import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as e,b as s,d as t,e as a,f as l,r as o,o as p}from"./app-BNYstFbe.js";const h={};function c(k,i){const n=o("RouteLink");return p(),d("div",null,[i[2]||(i[2]=e("h1",{id:"ws-binding",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ws-binding"},[e("span",null,"ws Binding")])],-1)),i[3]||(i[3]=e("p",null,[s("Defines a binding with WebSockets protocol support, with "),e("code",null,"server"),s(" or "),e("code",null,"client"),s(" behavior.")],-1)),i[4]||(i[4]=e("h2",{id:"server",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#server"},[e("span",null,"server")])],-1)),e("blockquote",null,[e("p",null,[t(n,{to:"/reference/config/bindings/ws/server.html"},{default:a(()=>i[0]||(i[0]=[s("Full config")])),_:1})])]),i[5]||(i[5]=l(`<p>The <code>server</code> kind <code>ws</code> binding converts inbound <code>http</code> request-response streams into <code>ws</code> full-duplex streams.</p><p>Conditional routes based on <code>ws</code> scheme, authority, path or negotiated subprotocol are used to route these streams to an <code>exit</code> binding.</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">ws_server</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  type</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">ws</span></span>
<span class="line highlighted"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  kind</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">server</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  exit</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">echo_server</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  routes</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    - </span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">when</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        - </span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">protocol</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">mqtt</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">      exit</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">mqtt_server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="client" tabindex="-1"><a class="header-anchor" href="#client"><span>client</span></a></h2>`,4)),e("blockquote",null,[e("p",null,[t(n,{to:"/reference/config/bindings/ws/client.html"},{default:a(()=>i[1]||(i[1]=[s("Full config")])),_:1})])]),i[6]||(i[6]=l(`<p>The <code>client</code> kind <code>ws</code> binding converts inbound <code>ws</code> full duplex streams into <code>http</code> request-response streams.</p><p>Conditional routes based on <code>ws</code> scheme, authority, path or negotiated subprotocol are used to route these streams to an <code>exit</code> binding.</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">ws_client</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  type</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">ws</span></span>
<span class="line highlighted"><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">  kind</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">: </span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">client</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3))])}const m=r(h,[["render",c],["__file","index.html.vue"]]),v=JSON.parse('{"path":"/reference/config/bindings/ws/","title":"ws Binding","lang":"en-US","frontmatter":{"redirectFrom":"/reference/config/bindings/binding-ws.html","dir":{"collapsible":false,"link":true},"shortTitle":"ws","category":["Binding"],"tag":["ws","server","client"],"description":"ws Binding Defines a binding with WebSockets protocol support, with server or client behavior. server The server kind ws binding converts inbound http request-response streams i...","gitInclude":[".partials/server.yaml",".partials/client.yaml"],"head":[["meta",{"property":"og:url","content":"https://docs.aklivity.io/zilla-docs/next/reference/config/bindings/ws/"}],["meta",{"property":"og:site_name","content":"Documentation"}],["meta",{"property":"og:title","content":"ws Binding"}],["meta",{"property":"og:description","content":"ws Binding Defines a binding with WebSockets protocol support, with server or client behavior. server The server kind ws binding converts inbound http request-response streams i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"ws"}],["meta",{"property":"article:tag","content":"server"}],["meta",{"property":"article:tag","content":"client"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ws Binding\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"server","slug":"server","link":"#server","children":[]},{"level":2,"title":"client","slug":"client","link":"#client","children":[]}],"readingTime":{"minutes":0.4,"words":120},"filePathRelative":"reference/config/bindings/ws/README.md","autoDesc":true}');export{m as comp,v as data};
